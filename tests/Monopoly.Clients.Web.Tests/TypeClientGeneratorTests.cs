using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Monopoly.Clients.Web.Generators;

namespace Monopoly.Clients.Web.Tests;

[TestClass]
public class TypeClientGeneratorTests
{
    [TestMethod]
    public void GenerateTypedClientAttribute()
    {
        // Arrange
        const string expectedFileName = "TypedHubClientAttribute.g.cs";
        const string expectedAttribute = """
                                         // <auto-generated />

                                         namespace SignalR.Client.Generator
                                         {
                                             [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
                                             public sealed class TypedHubClientAttribute : Attribute
                                             {
                                                 private readonly Type _requestType;
                                                 private readonly Type _responseType;
                                         
                                                 public TypedHubClientAttribute(Type requestType, Type responseType)
                                                 {
                                                     _requestType = requestType;
                                                     _responseType = responseType;
                                                 }
                                             }
                                         }
                                         """;
        var generator = new TypedSignalrClientGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(TypeClientGeneratorTests));

        // Act
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // Assert
        Assert.AreEqual(1, runResult.GeneratedTrees.Length);
        var actualSyntax = runResult.GeneratedTrees[0];
        Assert.IsTrue(actualSyntax.FilePath.EndsWith(expectedFileName));
        Assert.AreEqual(expectedAttribute, actualSyntax.GetText().ToString());
    }

    [TestMethod]
    [Ignore]
    public void GenerateTypedClientWithAttribute()
    {
        // Arrange
        const string expectedFileName = "TestHubConnection.g.cs";
        const string interfaceResponse = """
                                         using Monopoly.Web.Tests.DataModel;

                                         namespace Monopoly.Web.Tests.TestHubConnection

                                         public interface IResponse
                                         {
                                             Task DoNothingAsync();
                                             Task SendMessageAsync(string message);
                                             Task SendDataAsync(Data1 data, Data2 data2);
                                         }
                                         """;
        const string classDataModel = """
                                      namespace Monopoly.Web.Tests.DataModel

                                      public class Data1
                                      {
                                          public string Name { get; set; }
                                          public int Age { get; set; }
                                      }

                                      public class Data2
                                      {
                                          public string Address { get; set; }
                                      }
                                      """;

        const string interfaceRequest = """
                                        using Monopoly.Web.Tests.DataModel;

                                        namespace Monopoly.Web.Tests.TestHubConnection;

                                        public interface IRequest
                                        {
                                            Task DoNothingAsync();
                                            Task SendMessageAsync(string message);
                                            Task SendDataAsync(Data1 data, Data2 data2);
                                        }
                                        """;
        const string targetClass = """
                                   using SignalR.Client.Generator;
                                   using Monopoly.Web.Tests.TestHubConnection;

                                   namespace Monopoly.Web.Tests.TestHubConnection.Client

                                   [TypedHubClient(typeof(IRequest), typeof(IResponse))]
                                   public partial class TestHubConnection;
                                   """;
        const string expectedClass = """
                                     // <auto-generated />
                                     namespace Monopoly.Web.Tests.TestHubConnection.Client

                                     public partial class TestHubConnection
                                     {
                                         private readonly HubConnection hubConnection;
                                         public event DoNothingAsyncDelegate? DoNothingAsyncHandler;
                                         public delegate void DoNothingAsyncDelegate();
                                         public event SendMessageAsyncDelegate? SendMessageAsyncHandler;
                                         public delegate void SendMessageAsyncDelegate(string message);
                                         public event SendDataAsyncDelegate? SendDataAsyncHandler;
                                         public delegate void SendDataAsyncDelegate(Monopoly.Web.Tests.DataModel.Data1 data, Monopoly.Web.Tests.DataModel.Data2 data2);
                                         
                                         public TestHubConnection(HubConnection hubConnection)
                                         {
                                             this.hubConnection = hubConnection;
                                             hubConnection.On("DoNothingAsync", () => DoNothingAsyncHandler?.Invoke());
                                             hubConnection.On<string>("SendMessageAsync", (message) => SendMessageAsyncHandler?.Invoke(message));
                                             hubConnection.On<Monopoly.Web.Tests.DataModel.Data1, Monopoly.Web.Tests.DataModel.Data2>("SendDataAsync", (data, data2) => SendDataAsyncHandler?.Invoke(data, data2));
                                         }
                                         
                                         public async Task DoNothingAsync()
                                         {
                                             await hubConnection.SendAsync("DoNothingAsync");
                                         }
                                         public async Task SendMessageAsync(string message)
                                         {
                                             await hubConnection.SendAsync("SendMessageAsync", message);
                                         }
                                         public async Task SendDataAsync(Monopoly.Web.Tests.DataModel.Data1 data, Monopoly.Web.Tests.DataModel.Data2 data2)
                                         {
                                             await hubConnection.SendAsync("SendDataAsync", data, data2);
                                         }
                                     }
                                     """;
        var generator = new TypedSignalrClientGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(TypeClientGeneratorTests),
            new[]
            {
                CSharpSyntaxTree.ParseText(interfaceResponse), CSharpSyntaxTree.ParseText(classDataModel),
                CSharpSyntaxTree.ParseText(interfaceRequest), CSharpSyntaxTree.ParseText(targetClass)
            },
            new[]
            {
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });
        driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var diagnostic);
        // Act
        var runResult = driver.RunGenerators(newCompilation).GetRunResult();

        // Assert
        Assert.IsFalse(diagnostic.Any(x => x.Severity == DiagnosticSeverity.Error));
        Assert.AreEqual(2, runResult.GeneratedTrees.Length);
        var actualSyntax = runResult.GeneratedTrees.Select(x => x.WithFilePath(expectedFileName)).ToArray();
        Assert.AreEqual(expectedClass, actualSyntax[0].GetText().ToString());
    }
}